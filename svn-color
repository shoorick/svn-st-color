#!/usr/bin/perl

=head1 NAME

svn-color - Wrapper for colorizing Subversion output

=head1 DESCRIPTION

C<svn-color> is a wrapper which spawns Subversion client C<svn>
with specified subcommand and its arguments
then tries to add ANSI colors to processed lines.

=head1 USAGE

    svn-color [subcommand and arguments]

=head1 OPTIONS

=over 4

=item B<--bypass>, B<--no-color>

Do not colorize output. Use original C<svn> instead.

=back

=head1 SEE ALSO

L<http://svnbook.red-bean.com/>

=head1 AUTHOR

Alexander Sapozhnikov
L<E<lt>shoorick@cpan.orgE<gt>>
L<http://shoorick.ru>

=cut

use warnings;
use strict;

use FindBin;
use Term::ANSIColor;
use YAML::Tiny;

my $SVN = `which svn` // 'svn'; # Subversion executable
   $SVN =~ s/\s+$//;

# Bypass colorizing?
# Check for svn argument
my $bypass = grep { /^--force-interactive$/ } @ARGV;
# and remove our arguments
my $ARGV_LENGTH = scalar @ARGV;
@ARGV = grep { !/^--(bypass|no-color)$/ } @ARGV;
$bypass = 1
    if $ARGV_LENGTH != scalar @ARGV;

# Show result as is if terminal doesn't support colors
exec $SVN, @ARGV
    and exit
    if $ENV{'TERM'} !~ /color/
    || $bypass
    || !-t STDOUT;

my $subcommand = $ARGV[0] // ''; # instead of shift

my $config = YAML::Tiny->read( "$FindBin::Bin/config.yml" )->[0]
    or die "Cannot read configuration: $!";

my $schema = $ENV{'SVNCOLOR'} // $config->{'schema'} // 'default';

# replace subcommand with canonical name
foreach ( keys %{ $config->{'subcommands'} } ) {
    # exact matching
    last if $subcommand eq $_;

    next
        unless $config->{'subcommands'}->{$_}->{'aliases'};

    my $pattern = '^' . $config->{'subcommands'}->{$_}->{'aliases'} . '$';

    $subcommand = $_
    and last
        if $subcommand =~ /$pattern/;
}

# is command interactive?
exec $SVN, @ARGV
and exit
    if $config->{'subcommands'}->{ $subcommand }->{'interactive'};

my $rules  = $config->{'subcommands'}->{ $subcommand }->{'rules'};
my $colors = $config->{'colors'}->{ $schema }->{ $subcommand };

# Override rules and colors
if ( my $use = $config->{'subcommands'}->{ $subcommand }->{'use'} ) {
    $rules   = $config->{'subcommands'}->{ $use }->{'rules'};
    $colors  = $config->{'colors'}->{ $schema }->{ $use };
}

if ( my $conditional_use = $config->{'subcommands'}->{ $subcommand }->{'conditional_use'} ) {
    while ( my ( $argument, $use ) = each %$conditional_use ) {
        if ( grep { /^$argument$/ } @ARGV ) {
            $rules   = $config->{'subcommands'}->{ $use }->{'rules'};
            $colors  = $config->{'colors'}->{ $schema }->{ $use };
        }
    }
}

$|=1;

# Colorize lines
open(my $fh, '-|', $SVN, @ARGV)
    or die "Cannot run $SVN: $!";

while ( <$fh> ) {
    my $color;
    keys %$rules; # reset each()

    RULES:
    while ( my ( $name, $pattern ) = each %$rules ) {
        if ( /$pattern/ ) {
            $color = $colors->{ $name } if $colors;
            last RULES;
        }
    }

    print
    and next
        unless $color;

    chomp;
    print colored($_, $color), "\n";
} # while command give output

close $fh;
