#!/usr/bin/perl

=head1 NAME

svn-color - Wrapper for colorizing Subversion output

=head1 DESCRIPTION

C<svn-color> is a wrapper which spawns Subversion client C<svn>
with specified subcommand and its arguments
then tries to add ANSI colors to processed lines.

=head1 USAGE

    svn-color [subcommand and arguments]

=head1 SEE ALSO

L<http://svnbook.red-bean.com/>

=head1 AUTHOR

Alexander Sapozhnikov
L<E<lt>shoorick@cpan.orgE<gt>>
L<http://shoorick.ru>

=cut

use FindBin;
use Term::ANSIColor;
use YAML::Tiny;

use constant SVN => `which svn` // 'svn'; # Subversion executable

$|=1;
my    $command = join ' ', SVN =~ s/\s+$//r, @ARGV;
my $subcommand = shift;

# Show result as is if terminal doesn't support colors
print `$command`
    and exit
    if $ENV{'TERM'} !~ /color/;

my $config = YAML::Tiny->read( "$FindBin::Bin/config.yml" )->[0]
    or die "Cannot read configuration: $!";

# constant cannot be used below as key of hash
my $schema = $config->{'schema'} // 'default'; # TODO change color schema

# replace subcommand with canonical name
foreach ( keys %{ $config->{'subcommands'} } ) {
    # exact matching
    last if $subcommand eq $_;

    next
        unless $config->{'subcommands'}->{$_}->{'aliases'};

    my $pattern = '^' . $config->{'subcommands'}->{$_}->{'aliases'} . '$';

    $subcommand = $_
    and last
        if $subcommand =~ /$pattern/;
}

my $use    = $config->{'subcommands'}->{ $subcommand }->{'use'};
my $rules  = $config->{'subcommands'}->{ $subcommand }->{'rules'};
my $colors = $config->{'colors'}->{ $schema }->{ $subcommand };

# Override rules and colors
if ( $use ) {
    $rules  = $config->{'subcommands'}->{ $use }->{'rules'};
    $colors = $config->{'colors'}->{ $schema }->{ $use };
}

# Colorize lines
foreach my $line ( `$command` ) {
    my $color;

    RULES:
    while ( my ( $name, $pattern ) = each %$rules ) {
        if ( $line =~ /$pattern/ ) {
            $color = $colors->{ $name } if $colors;
            last RULES;
        }
    }

    print $line
    and next
        unless $color;

    chomp $line;
    print colored($line, $color), "\n";
} # foreach row in command output
